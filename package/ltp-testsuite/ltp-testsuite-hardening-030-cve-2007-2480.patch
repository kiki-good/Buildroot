diff -Naur ltp-full-20070228-orig/runtest/houndspk ltp-full-20070228-new/runtest/houndspk
--- ltp-full-20070228-orig/runtest/houndspk	2009-07-10 08:57:35.000000000 +0100
+++ ltp-full-20070228-new/runtest/houndspk	2009-07-10 09:47:41.000000000 +0100
@@ -1,6 +1,7 @@
 #DESCRIPTION:Math library tests - CPU tests
 
 cve-2008-5029 cve-2008-5029
+cve-2007-2480 cve-2007-2480
 
 abs01 abs01
 
diff -Naur ltp-full-20070228-orig/testcases/hardening/cve-2007-2480/cve-2007-2480.c ltp-full-20070228-new/testcases/hardening/cve-2007-2480/cve-2007-2480.c
--- ltp-full-20070228-orig/testcases/hardening/cve-2007-2480/cve-2007-2480.c	1970-01-01 01:00:00.000000000 +0100
+++ ltp-full-20070228-new/testcases/hardening/cve-2007-2480/cve-2007-2480.c	2009-07-08 16:54:28.000000000 +0100
@@ -0,0 +1,216 @@
+/*
+ *
+ *   Copyright (c) bSkyb 2009
+ *
+ */
+
+
+/*
+ * NAME
+ *	cve-2007-2480
+ *
+ * CALLS
+ *	-
+ *
+ * ALGORITHM
+ *	According to CVE description:
+ *        "The _udp_lib_get_port function in net/ipv4/udp.c in
+ *         Linux kernel 2.6.21 and earlier does not prevent a bind
+ *         to a port with a local address when there is already a
+ *         bind to that port with a wildcard local address, which
+ *         might allow local users to intercept local traffic for
+ *         daemons or other applications." 
+ *
+ *      This test is ensures that UDP binds to the same port
+ *      with a wildcard and fixed local address don't succeeded.
+ *
+ * RESTRICTIONS
+ *      -
+ *
+ * CHANGE LOG:
+ * July 08 2009: Ported to LTP Suite by Ben
+ *
+ */
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdbool.h>
+
+ /* test.h and usctest.h are the two header files that are required by the
+  * quickhit package.  They contain function and macro declarations which you
+  * can use in your test programs
+  */
+#include "test.h"
+#include "usctest.h"
+
+ /* The setup and cleanup functions are basic parts of a test case.  These
+  * steps are usually put in separate functions for clarity.  The help function
+  * is only needed when you are adding new command line options.
+  */
+void setup(); 
+void help();
+void cleanup();
+
+
+char *TCID = "cve-2007-2480";   /* Test program identifier.    */
+int TST_TOTAL=2;    		/* Total number of test cases. */
+extern int Tst_count;		/* Test Case counter for tst_* routines */
+
+
+
+
+//---------------------------------------------------------------
+/**
+ * @func main
+ * @desc 
+ *
+ *
+ *
+ *
+ *
+ */
+int main(int argc, char **argv)
+{
+	int lc;		        /* loop counter */
+	char *msg;		/* message returned from parse_opts */
+	int sock1 = -1, sock2 = -2;
+	struct sockaddr_in wildcard_addr, local_addr;
+
+
+	if ( (msg=parse_opts(argc, argv, (option_t *)NULL, NULL)) != (char *)NULL )
+	{
+		tst_brkm(TBROK, NULL, "OPTION PARSING ERROR - %s", msg);
+		tst_exit();
+	}
+
+
+	// CVE-2007-2480
+	// When allocating local ports, do not allow a bind to a port
+	// with a specific local address when a bind to that port with
+	// a wildcard local address already exists.
+
+
+	// To test see create two sockets, and bind to two addresses one
+	// with a wildcard local address the other one on the loopback
+	// interface (127.0.0.1) and try to use the same port numbers.
+
+
+
+	/***************************************************************
+	 * check looping state 
+	 ***************************************************************/
+	/* TEST_LOOPING() is a macro that will make sure the test continues
+	 * looping according to the standard command line args. 
+	 */
+	for (lc=0; TEST_LOOPING(lc); lc++) {
+
+		/* reset Tst_count in case we are looping. */
+		Tst_count=0;
+
+
+		if ((sock1 = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
+		{
+			tst_brkm(TFAIL, cleanup, "Failed to create first test socket.");
+		}
+		if ((sock2 = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
+		{
+			close(sock1);
+			tst_brkm(TFAIL, cleanup, "Failed to create second test socket.");
+		}
+
+
+		// Allow the kernel to choose a random port number by passing in 0 for the port.
+		wildcard_addr.sin_family = AF_INET;
+		wildcard_addr.sin_port = htons(4098);
+		wildcard_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+		memset(&(wildcard_addr.sin_zero), 0, 8);
+
+		//
+		local_addr.sin_family = AF_INET;
+		local_addr.sin_port = htons(4098);
+		inet_pton(AF_INET, "127.0.0.1", &local_addr.sin_addr);
+		//local_addr.sin_addr = htonl(INADDR_ANY);
+		memset(&(local_addr.sin_zero), 0, 8);
+
+
+		if (bind(sock1, (struct sockaddr *)&wildcard_addr, sizeof(struct sockaddr)) == -1)
+		{
+			close(sock1);
+			close(sock2);
+			tst_brkm(TFAIL, cleanup, "First bind to wildcard local address failed.\n");
+		}
+	
+
+		// This bind is expected to fail
+		if (bind(sock2, (struct sockaddr *)&local_addr, sizeof(struct sockaddr)) != -1)
+		{
+			close(sock1);
+			close(sock2);
+			tst_brkm(TFAIL, cleanup, "Second bind unexpectedly succeeded ... this was suppose to fail.\n");
+		}
+
+		close(sock1);
+		close(sock2);
+	}
+
+	cleanup();
+
+	return 0;
+}
+
+
+/***************************************************************
+ * help
+ ***************************************************************/
+/* The custom help() function is really simple.  Just write your help message to
+ * standard out.  Your help function will be called after the standard options
+ * have been printed
+ */
+void
+help()
+{
+	
+}
+
+
+/***************************************************************
+ * setup() - performs all ONE TIME setup for this test.
+ ***************************************************************/
+void 
+setup()
+{
+	/* Pause if that option was specified */
+	/* One cavet that hasn't been fixed yet.  TEST_PAUSE contains the code to
+	 * fork the test with the -c option.  You want to make sure you do this
+	 * before you create your temporary directory.
+	 */
+	TEST_PAUSE;
+}
+
+/***************************************************************
+ * cleanup() - performs all ONE TIME cleanup for this test at
+ *		completion or premature exit.
+ ***************************************************************/
+void 
+cleanup()
+{
+	/*
+	 * print timing stats if that option was specified.
+	 * print errno log if that option was specified.
+	 */
+	TEST_CLEANUP;
+
+	/* exit with return code appropriate for results */
+	tst_exit();
+}
+
+
+
+
diff -Naur ltp-full-20070228-orig/testcases/hardening/cve-2007-2480/Makefile ltp-full-20070228-new/testcases/hardening/cve-2007-2480/Makefile
--- ltp-full-20070228-orig/testcases/hardening/cve-2007-2480/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ ltp-full-20070228-new/testcases/hardening/cve-2007-2480/Makefile	2009-07-08 16:54:05.000000000 +0100
@@ -0,0 +1,22 @@
+#
+#  Copyright (c) bSkyb, 2009
+#
+#  Generic makefile for CVE patch tests.
+#
+#
+#
+#
+
+CFLAGS += -I../../../include -Wall
+LDLIBS += -L../../../lib -lltp
+
+SRCS    = $(wildcard *.c)
+TARGETS = $(patsubst %.c,%,$(SRCS))
+
+all: $(TARGETS)
+
+install:
+	@set -e; for i in $(TARGETS); do ln -f $$i ../../bin/$$i ; done
+
+clean:
+	rm -f $(TARGETS)
