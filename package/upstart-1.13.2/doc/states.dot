/* Upstart state machine.
 *
 * Generate with:
 *   dot -Tpng -ostates.png states.dot
 *
 * Diamonds represent natural rest states in which we need to take an action
 * to change the goal.
 *
 * Ovals represent ordinary states which clear themselves when the process
 * being run, or the event that was emitted, finishes.
 *
 * Rectangles represent additional actions that are taken, they are not
 * states, instead you should follow through them to the next real state.
 *
 * Green arrows are followed while the goal is START.
 * Red arrows are followed while the goal is STOP.
 *
 * Note that from the running state, there are two read arrows leaving it;
 * these are chosen based on whether there is a process for the job or not.
 */

digraph {
	edge [fontsize=10];

	waiting [shape=diamond];
	starting [label="starting\n(emit starting)"];
	security_spawning [label="security-spawning"];
	security [label="security"];
	pre_starting [label="pre-starting"];
	pre_start [label="pre-start"];
	spawning [label="spawning"];
	spawned [label="spawned\n(wait for pid)"];
	post_starting [label="post-starting"];
	post_start [label="post-start"];
	emit_started [shape=rectangle,label="emit started"];
	running [shape=diamond];
	pre_stopping [label="pre-stopping"];
	pre_stop [label="pre-stop"];
	stopping [label="stopping\n(emit stopping)"];
	killed [label="killed\n(wait for SIGCHLD)"];
	post_stopping [label="post-stopping"];
	post_stop [label="post-stop"];
	emit_stopped [shape=rectangle,label="emit stopped"];

	constraint=false;
	waiting -> starting [color=green,weight=10];

	starting -> security_spawning [color=green,weight=10];
	starting -> stopping [color=red];

	security_spawning -> security [color=green,weight=10];
	security_spawning -> stopping [color=red];

	security -> pre_starting [color=green,weight=10];
	security -> stopping [color=red];

	pre_starting -> pre_start [color=green,weight=10];
	pre_starting -> stopping [color=red];

	pre_start -> spawning [color=green,weight=10];
	pre_start -> stopping [color=red];

	spawning -> spawned [color=green,weight=10];
	spawning -> stopping [color=red];

	spawned -> post_starting [color=green,weight=10];
	spawned -> stopping [color=red];

	post_starting -> post_start [color=green,weight=10];
	post_starting -> stopping [color=red];

	post_start -> emit_started -> running [color=green,weight=10];
	post_start -> stopping [color=red];

	running -> pre_stopping [color=red,fontcolor=red,label="pid > 0",weight=10];
	running -> stopping [color=red,fontcolor=red,label="pid == 0"];
	running -> stopping [color=green,fontcolor=darkgreen,label="respawn"];

	pre_stopping -> pre_stop [color=green,weight=10];
	pre_stopping -> pre_stop [color=red,weight=10];

	pre_stop -> running [color=green];
	pre_stop -> stopping [color=red,weight=10];

	stopping -> killed [color=green];
	stopping -> killed [color=red];

	killed -> post_stopping [color=green];
	killed -> post_stopping [color=red];

	post_stopping -> post_stop [color=green,weight=10];
	post_stopping -> post_stop [color=red];

	post_stop -> starting [color=green];
	post_stop -> emit_stopped [color=red,weight=10];

	emit_stopped -> waiting [color=red];
}
