.TH "wl_proxy" 3 "Fri Feb 13 2015" "Version 1.7.0" "Wayland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
wl_proxy \- 
.PP
Represents a protocol object on the client side\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <wayland-client\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "struct \fBwl_proxy\fP * \fBwl_proxy_create\fP (struct \fBwl_proxy\fP *factory, const struct \fBwl_interface\fP *interface)"
.br
.ti -1c
.RI "void \fBwl_proxy_destroy\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "int \fBwl_proxy_add_listener\fP (struct \fBwl_proxy\fP *proxy, void(**implementation)(void), void *data)"
.br
.ti -1c
.RI "const void * \fBwl_proxy_get_listener\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "int \fBwl_proxy_add_dispatcher\fP (struct \fBwl_proxy\fP *proxy, \fBwl_dispatcher_func_t\fP dispatcher, const void *implementation, void *data)"
.br
.ti -1c
.RI "struct \fBwl_proxy\fP * \fBwl_proxy_marshal_array_constructor\fP (struct \fBwl_proxy\fP *proxy, uint32_t opcode, union \fBwl_argument\fP *args, const struct \fBwl_interface\fP *interface)"
.br
.ti -1c
.RI "void \fBwl_proxy_marshal\fP (struct \fBwl_proxy\fP *proxy, uint32_t opcode,\&.\&.\&.)"
.br
.ti -1c
.RI "struct \fBwl_proxy\fP * \fBwl_proxy_marshal_constructor\fP (struct \fBwl_proxy\fP *proxy, uint32_t opcode, const struct \fBwl_interface\fP *interface,\&.\&.\&.)"
.br
.ti -1c
.RI "void \fBwl_proxy_marshal_array\fP (struct \fBwl_proxy\fP *proxy, uint32_t opcode, union \fBwl_argument\fP *args)"
.br
.ti -1c
.RI "void \fBwl_proxy_set_user_data\fP (struct \fBwl_proxy\fP *proxy, void *user_data)"
.br
.ti -1c
.RI "void * \fBwl_proxy_get_user_data\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "uint32_t \fBwl_proxy_get_id\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "const char * \fBwl_proxy_get_class\fP (struct \fBwl_proxy\fP *proxy)"
.br
.ti -1c
.RI "void \fBwl_proxy_set_queue\fP (struct \fBwl_proxy\fP *proxy, struct \fBwl_event_queue\fP *queue)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents a protocol object on the client side\&. 

A \fBwl_proxy\fP acts as a client side proxy to an object existing in the compositor\&. The proxy is responsible for converting requests made by the clients with \fBwl_proxy_marshal()\fP into Wayland's wire format\&. Events coming from the compositor are also handled by the proxy, which will in turn call the handler set with \fBwl_proxy_add_listener()\fP\&.
.PP
\fBNote:\fP
.RS 4
With the exception of function \fBwl_proxy_set_queue()\fP, functions accessing a \fBwl_proxy\fP are not normally used by client code\&. Clients should normally use the higher level interface generated by the scanner to interact with compositor objects\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int wl_proxy_add_dispatcher (struct \fBwl_proxy\fP *proxy, \fBwl_dispatcher_func_t\fPdispatcher, const void *implementation, void *data)"
Set a proxy's listener (with dispatcher)
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIdispatcher\fP The dispatcher to be used for this proxy 
.br
\fIimplementation\fP The dispatcher-specific listener implementation 
.br
\fIdata\fP User data to be associated with the proxy 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on failure
.RE
.PP
Set proxy's listener to use \fCdispatcher_func\fP as its dispatcher and \fCdispatcher_data\fP as its dispatcher-specific implementation and its user data to \fCdata\fP\&. If a listener has already been set, this function fails and nothing is changed\&.
.PP
The exact details of dispatcher_data depend on the dispatcher used\&. This function is intended to be used by language bindings, not user code\&. 
.SS "int wl_proxy_add_listener (struct \fBwl_proxy\fP *proxy, void(**)(void)implementation, void *data)"
Set a proxy's listener
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIimplementation\fP The listener to be added to proxy 
.br
\fIdata\fP User data to be associated with the proxy 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on failure
.RE
.PP
Set proxy's listener to \fCimplementation\fP and its user data to \fCdata\fP\&. If a listener has already been set, this function fails and nothing is changed\&.
.PP
\fCimplementation\fP is a vector of function pointers\&. For an opcode \fCn\fP, \fCimplementation\fP[n] should point to the handler of \fCn\fP for the given object\&. 
.SS "struct \fBwl_proxy\fP * wl_proxy_create (struct \fBwl_proxy\fP *factory, const struct \fBwl_interface\fP *interface)"
Create a proxy object with a given interface
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP Factory proxy object 
.br
\fIinterface\fP Interface the proxy object should use 
.RE
.PP
\fBReturns:\fP
.RS 4
A newly allocated proxy object or NULL on failure
.RE
.PP
This function creates a new proxy object with the supplied interface\&. The proxy object will have an id assigned from the client id space\&. The id should be created on the compositor side by sending an appropriate request with \fBwl_proxy_marshal()\fP\&.
.PP
The proxy will inherit the display and event queue of the factory object\&.
.PP
\fBNote:\fP
.RS 4
This should not normally be used by non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_display\fP, \fBwl_event_queue\fP, \fBwl_proxy_marshal()\fP 
.RE
.PP

.SS "void wl_proxy_destroy (struct \fBwl_proxy\fP *proxy)"
Destroy a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy to be destroyed 
.RE
.PP

.SS "const char * wl_proxy_get_class (struct \fBwl_proxy\fP *proxy)"
Get the interface name (class) of a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
The interface name of the object associated with the proxy 
.RE
.PP

.SS "uint32_t wl_proxy_get_id (struct \fBwl_proxy\fP *proxy)"
Get the id of a proxy object
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
The id the object associated with the proxy 
.RE
.PP

.SS "const void * wl_proxy_get_listener (struct \fBwl_proxy\fP *proxy)"
Get a proxy's listener
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
The address of the proxy's listener or NULL if no listener is set
.RE
.PP
Gets the address to the proxy's listener; which is the listener set with \fBwl_proxy_add_listener\fP\&.
.PP
This function is useful in clients with multiple listeners on the same interface to allow the identification of which code to execute\&. 
.SS "void * wl_proxy_get_user_data (struct \fBwl_proxy\fP *proxy)"
Get the user data associated with a proxy
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.RE
.PP
\fBReturns:\fP
.RS 4
The user data associated with proxy 
.RE
.PP

.SS "void wl_proxy_marshal (struct \fBwl_proxy\fP *proxy, uint32_topcode, \&.\&.\&.)"
Prepare a request to be sent to the compositor
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIopcode\fP Opcode of the request to be sent 
.br
\fI\&.\&.\&.\fP Extra arguments for the given request
.RE
.PP
This function is similar to \fBwl_proxy_marshal_constructor()\fP, except it doesn't create proxies for new-id arguments\&.
.PP
\fBNote:\fP
.RS 4
This should not normally be used by non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_proxy_create()\fP 
.RE
.PP

.SS "void wl_proxy_marshal_array (struct \fBwl_proxy\fP *proxy, uint32_topcode, union \fBwl_argument\fP *args)"
Prepare a request to be sent to the compositor
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIopcode\fP Opcode of the request to be sent 
.br
\fIargs\fP Extra arguments for the given request
.RE
.PP
This function is similar to \fBwl_proxy_marshal_array_constructor()\fP, except it doesn't create proxies for new-id arguments\&.
.PP
\fBNote:\fP
.RS 4
This is intended to be used by language bindings and not in non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_proxy_marshal()\fP 
.RE
.PP

.SS "struct \fBwl_proxy\fP * wl_proxy_marshal_array_constructor (struct \fBwl_proxy\fP *proxy, uint32_topcode, union \fBwl_argument\fP *args, const struct \fBwl_interface\fP *interface)"
Prepare a request to be sent to the compositor
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIopcode\fP Opcode of the request to be sent 
.br
\fIargs\fP Extra arguments for the given request 
.br
\fIinterface\fP The interface to use for the new proxy
.RE
.PP
Translates the request given by opcode and the extra arguments into the wire format and write it to the connection buffer\&. This version takes an array of the union type \fBwl_argument\fP\&.
.PP
For new-id arguments, this function will allocate a new \fBwl_proxy\fP and send the ID to the server\&. The new \fBwl_proxy\fP will be returned on success or NULL on errror with errno set accordingly\&.
.PP
\fBNote:\fP
.RS 4
This is intended to be used by language bindings and not in non-generated code\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_proxy_marshal()\fP 
.RE
.PP

.SS "struct \fBwl_proxy\fP * wl_proxy_marshal_constructor (struct \fBwl_proxy\fP *proxy, uint32_topcode, const struct \fBwl_interface\fP *interface, \&.\&.\&.)"
Prepare a request to be sent to the compositor
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIopcode\fP Opcode of the request to be sent 
.br
\fIinterface\fP The interface to use for the new proxy 
.br
\fI\&.\&.\&.\fP Extra arguments for the given request 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBwl_proxy\fP for the new_id argument or NULL on error
.RE
.PP
Translates the request given by opcode and the extra arguments into the wire format and write it to the connection buffer\&.
.PP
For new-id arguments, this function will allocate a new \fBwl_proxy\fP and send the ID to the server\&. The new \fBwl_proxy\fP will be returned on success or NULL on errror with errno set accordingly\&.
.PP
\fBNote:\fP
.RS 4
This should not normally be used by non-generated code\&. 
.RE
.PP

.SS "void wl_proxy_set_queue (struct \fBwl_proxy\fP *proxy, struct \fBwl_event_queue\fP *queue)"
Assign a proxy to an event queue
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIqueue\fP The event queue that will handle this proxy or NULL
.RE
.PP
Assign proxy to event queue\&. Events coming from \fCproxy\fP will be queued in \fCqueue\fP from now\&. If queue is NULL, then the display's default queue is set to the proxy\&.
.PP
\fBNote:\fP
.RS 4
By default, the queue set in proxy is the one inherited from parent\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwl_display_dispatch_queue()\fP 
.RE
.PP

.SS "void wl_proxy_set_user_data (struct \fBwl_proxy\fP *proxy, void *user_data)"
Set the user data associated with a proxy
.PP
\fBParameters:\fP
.RS 4
\fIproxy\fP The proxy object 
.br
\fIuser_data\fP The data to be associated with proxy
.RE
.PP
Set the user data associated with \fCproxy\fP\&. When events for this proxy are received, \fCuser_data\fP will be supplied to its listener\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Wayland from the source code\&.
